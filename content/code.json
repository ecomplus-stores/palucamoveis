{
  "css": "#main > div.ecom-credits{\n  display:none;\n}",
  "html_head": "const DEFAULT_SECURITY_HEADERS = {\n    /*\n    Secure your application with Content-Security-Policy headers.\n    Enabling these headers will permit content from a trusted domain and all its subdomains.\n    @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\n    \"Content-Security-Policy\": \"default-src 'self' example.com *.example.com\",\n    */\n    /*\n    You can also set Strict-Transport-Security headers. \n    These are not automatically set because your website might get added to Chrome's HSTS preload list.\n    Here's the code if you want to apply it:\n    \"Strict-Transport-Security\" : \"max-age=63072000; includeSubDomains; preload\",\n    */\n    /*\n    Permissions-Policy header provides the ability to allow or deny the use of browser features, such as opting out of FLoC - which you can use below:\n    \"Permissions-Policy\": \"interest-cohort=()\",\n    */\n    /*\n    X-XSS-Protection header prevents a page from loading if an XSS attack is detected. \n    @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\n    */\n    \"X-XSS-Protection\": \"0; mode=block\",\n    /*\n    X-Frame-Options header prevents click-jacking attacks. \n    @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\n    */\n    \"X-Frame-Options\": \"DENY\",\n    /*\n    X-Content-Type-Options header prevents MIME-sniffing. \n    @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\n    */\n    \"X-Content-Type-Options\": \"nosniff\",\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n    'Cross-Origin-Embedder-Policy': 'require-corp; report-to=\"default\";',\n    'Cross-Origin-Opener-Policy': 'same-site; report-to=\"default\";',\n    \"Cross-Origin-Resource-Policy\": \"same-site\",\n}\nconst BLOCKED_HEADERS = [\n    \"Public-Key-Pins\",\n    \"X-Powered-By\",\n    \"X-AspNet-Version\",\n]\naddEventListener('fetch', event => {\n    event.respondWith(addHeaders(event.request))\n})\nasync function addHeaders(req) {\n    let response = await fetch(req)\n    let newHeaders = new Headers(response.headers)\n\n    const tlsVersion = req.cf.tlsVersion\n    // This sets the headers for HTML responses: \n    if (newHeaders.has(\"Content-Type\") && !newHeaders.get(\"Content-Type\").includes(\"text/html\")) {\n        return new Response(response.body, {\n            status: response.status,\n            statusText: response.statusText,\n            headers: newHeaders\n        })\n    }\n\n    Object.keys(DEFAULT_SECURITY_HEADERS).map(function (name) {\n        newHeaders.set(name, DEFAULT_SECURITY_HEADERS[name]);\n    })\n\n    BLOCKED_HEADERS.forEach(function (name) {\n        newHeaders.delete(name)\n    })\n\n    if (tlsVersion != \"TLSv1.2\" && tlsVersion != \"TLSv1.3\") {\n        return new Response(\"You need to use TLS version 1.2 or higher.\", { status: 400 })\n    } else {\n        return new Response(response.body, {\n            status: response.status,\n            statusText: response.statusText,\n            headers: newHeaders\n        })\n    }\n}",
  "html_body": "<a id=\"seloEbit\" href=\"http://www.ebit.com.br/109374\" target=\"_blank\" data-noop=\"redir(this.href);\"></a> <script type=\"text/javascript\" id=\"getSelo\" src=\"https://imgs.ebit.com.br/ebitBR/selo-ebit/js/getSelo.js?109374\"> </script>"
}